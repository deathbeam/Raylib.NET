// This file was generated by Bindgen, do not edit it manually.
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Bindgen.Interop;
using System.Numerics;

namespace RaylibNET;

public static unsafe partial class Rlgl
{
    public const string LIBRARY = "raylib";

    public const string RLGL_VERSION = "5.0";

    public const int RL_DEFAULT_BATCH_BUFFER_ELEMENTS = 8192;

    public const int RL_DEFAULT_BATCH_BUFFERS = 1;

    public const int RL_DEFAULT_BATCH_DRAWCALLS = 256;

    public const int RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS = 4;

    public const int RL_MAX_MATRIX_STACK_SIZE = 32;

    public const int RL_MAX_SHADER_LOCATIONS = 32;

    public const float RL_CULL_DISTANCE_NEAR = 0.01f;

    public const float RL_CULL_DISTANCE_FAR = 1000.0f;

    public const int RL_TEXTURE_WRAP_S = 10242;

    public const int RL_TEXTURE_WRAP_T = 10243;

    public const int RL_TEXTURE_MAG_FILTER = 10240;

    public const int RL_TEXTURE_MIN_FILTER = 10241;

    public const int RL_TEXTURE_FILTER_NEAREST = 9728;

    public const int RL_TEXTURE_FILTER_LINEAR = 9729;

    public const int RL_TEXTURE_FILTER_MIP_NEAREST = 9984;

    public const int RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR = 9986;

    public const int RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST = 9985;

    public const int RL_TEXTURE_FILTER_MIP_LINEAR = 9987;

    public const int RL_TEXTURE_FILTER_ANISOTROPIC = 12288;

    public const int RL_TEXTURE_MIPMAP_BIAS_RATIO = 16384;

    public const int RL_TEXTURE_WRAP_REPEAT = 10497;

    public const int RL_TEXTURE_WRAP_CLAMP = 33071;

    public const int RL_TEXTURE_WRAP_MIRROR_REPEAT = 33648;

    public const int RL_TEXTURE_WRAP_MIRROR_CLAMP = 34626;

    public const int RL_MODELVIEW = 5888;

    public const int RL_PROJECTION = 5889;

    public const int RL_TEXTURE = 5890;

    public const int RL_LINES = 1;

    public const int RL_TRIANGLES = 4;

    public const int RL_QUADS = 7;

    public const int RL_UNSIGNED_BYTE = 5121;

    public const int RL_FLOAT = 5126;

    public const int RL_STREAM_DRAW = 35040;

    public const int RL_STREAM_READ = 35041;

    public const int RL_STREAM_COPY = 35042;

    public const int RL_STATIC_DRAW = 35044;

    public const int RL_STATIC_READ = 35045;

    public const int RL_STATIC_COPY = 35046;

    public const int RL_DYNAMIC_DRAW = 35048;

    public const int RL_DYNAMIC_READ = 35049;

    public const int RL_DYNAMIC_COPY = 35050;

    public const int RL_FRAGMENT_SHADER = 35632;

    public const int RL_VERTEX_SHADER = 35633;

    public const int RL_COMPUTE_SHADER = 37305;

    public const int RL_ZERO = 0;

    public const int RL_ONE = 1;

    public const int RL_SRC_COLOR = 768;

    public const int RL_ONE_MINUS_SRC_COLOR = 769;

    public const int RL_SRC_ALPHA = 770;

    public const int RL_ONE_MINUS_SRC_ALPHA = 771;

    public const int RL_DST_ALPHA = 772;

    public const int RL_ONE_MINUS_DST_ALPHA = 773;

    public const int RL_DST_COLOR = 774;

    public const int RL_ONE_MINUS_DST_COLOR = 775;

    public const int RL_SRC_ALPHA_SATURATE = 776;

    public const int RL_CONSTANT_COLOR = 32769;

    public const int RL_ONE_MINUS_CONSTANT_COLOR = 32770;

    public const int RL_CONSTANT_ALPHA = 32771;

    public const int RL_ONE_MINUS_CONSTANT_ALPHA = 32772;

    public const int RL_FUNC_ADD = 32774;

    public const int RL_MIN = 32775;

    public const int RL_MAX = 32776;

    public const int RL_FUNC_SUBTRACT = 32778;

    public const int RL_FUNC_REVERSE_SUBTRACT = 32779;

    public const int RL_BLEND_EQUATION = 32777;

    public const int RL_BLEND_EQUATION_RGB = 32777;

    public const int RL_BLEND_EQUATION_ALPHA = 34877;

    public const int RL_BLEND_DST_RGB = 32968;

    public const int RL_BLEND_SRC_RGB = 32969;

    public const int RL_BLEND_DST_ALPHA = 32970;

    public const int RL_BLEND_SRC_ALPHA = 32971;

    public const int RL_BLEND_COLOR = 32773;

    public const int RL_READ_FRAMEBUFFER = 36008;

    public const int RL_DRAW_FRAMEBUFFER = 36009;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION = 0;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD = 1;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL = 2;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR = 3;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT = 4;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2 = 5;

    public const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES = 6;

    /// <summary>
    /// Choose the current matrix to be transformed
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlMatrixMode(int mode);

    /// <summary>
    /// Push the current matrix to stack
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlPushMatrix();

    /// <summary>
    /// Pop latest inserted matrix from stack
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlPopMatrix();

    /// <summary>
    /// Reset current matrix to identity matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlLoadIdentity();

    /// <summary>
    /// Multiply the current matrix by a translation matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlTranslatef(float x, float y, float z);

    /// <summary>
    /// Multiply the current matrix by a rotation matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlRotatef(float angle, float x, float y, float z);

    /// <summary>
    /// Multiply the current matrix by a scaling matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlScalef(float x, float y, float z);

    /// <summary>
    /// Multiply the current matrix by another matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlMultMatrixf(float* matf);

    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlFrustum(double left, double right, double bottom, double top, double znear, double zfar);

    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlOrtho(double left, double right, double bottom, double top, double znear, double zfar);

    /// <summary>
    /// Set the viewport area
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlViewport(int x, int y, int width, int height);

    /// <summary>
    /// Set clip planes distances
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetClipPlanes(double nearPlane, double farPlane);

    /// <summary>
    /// Get cull plane distance near
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial double rlGetCullDistanceNear();

    /// <summary>
    /// Get cull plane distance far
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial double rlGetCullDistanceFar();

    /// <summary>
    /// Initialize drawing mode (how to organize vertex)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlBegin(int mode);

    /// <summary>
    /// Finish vertex providing
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnd();

    /// <summary>
    /// Define one vertex (position) - 2 int
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlVertex2i(int x, int y);

    /// <summary>
    /// Define one vertex (position) - 2 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlVertex2f(float x, float y);

    /// <summary>
    /// Define one vertex (position) - 3 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlVertex3f(float x, float y, float z);

    /// <summary>
    /// Define one vertex (texture coordinate) - 2 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlTexCoord2f(float x, float y);

    /// <summary>
    /// Define one vertex (normal) - 3 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlNormal3f(float x, float y, float z);

    /// <summary>
    /// Define one vertex (color) - 4 byte
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlColor4ub(byte r, byte g, byte b, byte a);

    /// <summary>
    /// Define one vertex (color) - 3 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlColor3f(float x, float y, float z);

    /// <summary>
    /// Define one vertex (color) - 4 float
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlColor4f(float x, float y, float z, float w);

    /// <summary>
    /// Enable vertex array (VAO, if supported)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial NativeBool rlEnableVertexArray(uint vaoId);

    /// <summary>
    /// Disable vertex array (VAO, if supported)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableVertexArray();

    /// <summary>
    /// Enable vertex buffer (VBO)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableVertexBuffer(uint id);

    /// <summary>
    /// Disable vertex buffer (VBO)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableVertexBuffer();

    /// <summary>
    /// Enable vertex buffer element (VBO element)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableVertexBufferElement(uint id);

    /// <summary>
    /// Disable vertex buffer element (VBO element)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableVertexBufferElement();

    /// <summary>
    /// Enable vertex attribute index
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableVertexAttribute(uint index);

    /// <summary>
    /// Disable vertex attribute index
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableVertexAttribute(uint index);

    /// <summary>
    /// Select and active a texture slot
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlActiveTextureSlot(int slot);

    /// <summary>
    /// Enable texture
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableTexture(uint id);

    /// <summary>
    /// Disable texture
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableTexture();

    /// <summary>
    /// Enable texture cubemap
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableTextureCubemap(uint id);

    /// <summary>
    /// Disable texture cubemap
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableTextureCubemap();

    /// <summary>
    /// Set texture parameters (filter, wrap)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlTextureParameters(uint id, int @param, int value);

    /// <summary>
    /// Set cubemap parameters (filter, wrap)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlCubemapParameters(uint id, int @param, int value);

    /// <summary>
    /// Enable shader program
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableShader(uint id);

    /// <summary>
    /// Disable shader program
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableShader();

    /// <summary>
    /// Enable render texture (fbo)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableFramebuffer(uint id);

    /// <summary>
    /// Disable render texture (fbo), return to default framebuffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableFramebuffer();

    /// <summary>
    /// Get the currently active render texture (fbo), 0 for default framebuffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlGetActiveFramebuffer();

    /// <summary>
    /// Activate multiple draw color buffers
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlActiveDrawBuffers(int count);

    /// <summary>
    /// Blit active framebuffer to main framebuffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlBlitFramebuffer(int srcX, int srcY, int srcWidth, int srcHeight, int dstX, int dstY, int dstWidth, int dstHeight, int bufferMask);

    /// <summary>
    /// Bind framebuffer (FBO)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlBindFramebuffer(uint target, uint framebuffer);

    /// <summary>
    /// Enable color blending
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableColorBlend();

    /// <summary>
    /// Disable color blending
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableColorBlend();

    /// <summary>
    /// Enable depth test
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableDepthTest();

    /// <summary>
    /// Disable depth test
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableDepthTest();

    /// <summary>
    /// Enable depth write
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableDepthMask();

    /// <summary>
    /// Disable depth write
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableDepthMask();

    /// <summary>
    /// Enable backface culling
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableBackfaceCulling();

    /// <summary>
    /// Disable backface culling
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableBackfaceCulling();

    /// <summary>
    /// Color mask control
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlColorMask(NativeBool r, NativeBool g, NativeBool b, NativeBool a);

    /// <summary>
    /// Set face culling mode
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetCullFace(int mode);

    /// <summary>
    /// Enable scissor test
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableScissorTest();

    /// <summary>
    /// Disable scissor test
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableScissorTest();

    /// <summary>
    /// Scissor test
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlScissor(int x, int y, int width, int height);

    /// <summary>
    /// Enable wire mode
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableWireMode();

    /// <summary>
    /// Enable point mode
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnablePointMode();

    /// <summary>
    /// Disable wire (and point) mode
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableWireMode();

    /// <summary>
    /// Set the line drawing width
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetLineWidth(float width);

    /// <summary>
    /// Get the line drawing width
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial float rlGetLineWidth();

    /// <summary>
    /// Enable line aliasing
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableSmoothLines();

    /// <summary>
    /// Disable line aliasing
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableSmoothLines();

    /// <summary>
    /// Enable stereo rendering
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlEnableStereoRender();

    /// <summary>
    /// Disable stereo rendering
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDisableStereoRender();

    /// <summary>
    /// Check if stereo render is enabled
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial NativeBool rlIsStereoRenderEnabled();

    /// <summary>
    /// Clear color buffer with color
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlClearColor(byte r, byte g, byte b, byte a);

    /// <summary>
    /// Clear used screen buffers (color and depth)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlClearScreenBuffers();

    /// <summary>
    /// Check and log OpenGL error codes
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlCheckErrors();

    /// <summary>
    /// Set blending mode
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetBlendMode(int mode);

    /// <summary>
    /// Set blending mode factor and equation (using OpenGL factors)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetBlendFactors(int glSrcFactor, int glDstFactor, int glEquation);

    /// <summary>
    /// Set blending mode factors and equations separately (using OpenGL factors)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetBlendFactorsSeparate(int glSrcRGB, int glDstRGB, int glSrcAlpha, int glDstAlpha, int glEqRGB, int glEqAlpha);

    /// <summary>
    /// Initialize rlgl (buffers, shaders, textures, states)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlglInit(int width, int height);

    /// <summary>
    /// De-initialize rlgl (buffers, shaders, textures)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlglClose();

    /// <summary>
    /// Load OpenGL extensions (loader function required)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlLoadExtensions(void* loader);

    /// <summary>
    /// Get current OpenGL version
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial int rlGetVersion();

    /// <summary>
    /// Set current framebuffer width
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetFramebufferWidth(int width);

    /// <summary>
    /// Get default framebuffer width
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial int rlGetFramebufferWidth();

    /// <summary>
    /// Set current framebuffer height
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetFramebufferHeight(int height);

    /// <summary>
    /// Get default framebuffer height
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial int rlGetFramebufferHeight();

    /// <summary>
    /// Get default texture id
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlGetTextureIdDefault();

    /// <summary>
    /// Get default shader id
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlGetShaderIdDefault();

    /// <summary>
    /// Get default shader locations
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial int* rlGetShaderLocsDefault();

    /// <summary>
    /// Load a render batch system
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial RenderBatch rlLoadRenderBatch(int numBuffers, int bufferElements);

    /// <summary>
    /// Unload render batch system
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadRenderBatch(RenderBatch batch);

    /// <summary>
    /// Draw render batch data (Update->Draw->Reset)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlDrawRenderBatch(RenderBatch* batch);

    /// <summary>
    /// Set the active render batch for rlgl (NULL for default internal)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlSetRenderBatchActive(RenderBatch* batch);

    /// <summary>
    /// Update and draw internal render batch
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDrawRenderBatchActive();

    /// <summary>
    /// Check internal buffer overflow for a given number of vertex
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial NativeBool rlCheckRenderBatchLimit(int vCount);

    /// <summary>
    /// Set current texture for render batch and check buffers limits
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetTexture(uint id);

    /// <summary>
    /// Load vertex array (vao) if supported
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadVertexArray();

    /// <summary>
    /// Load a vertex buffer object
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial uint rlLoadVertexBuffer(void* buffer, int size, NativeBool dynamic);

    /// <summary>
    /// Load vertex buffer elements object
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial uint rlLoadVertexBufferElement(void* buffer, int size, NativeBool dynamic);

    /// <summary>
    /// Update vertex buffer object data on GPU buffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlUpdateVertexBuffer(uint bufferId, void* data, int dataSize, int offset);

    /// <summary>
    /// Update vertex buffer elements data on GPU buffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlUpdateVertexBufferElements(uint id, void* data, int dataSize, int offset);

    /// <summary>
    /// Unload vertex array (vao)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadVertexArray(uint vaoId);

    /// <summary>
    /// Unload vertex buffer object
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadVertexBuffer(uint vboId);

    /// <summary>
    /// Set vertex attribute data configuration
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetVertexAttribute(uint index, int compSize, int @type, NativeBool normalized, int stride, int offset);

    /// <summary>
    /// Set vertex attribute data divisor
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetVertexAttributeDivisor(uint index, int divisor);

    /// <summary>
    /// Set vertex attribute default value, when attribute to provided
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlSetVertexAttributeDefault(int locIndex, void* value, int attribType, int count);

    /// <summary>
    /// Draw vertex array (currently active vao)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDrawVertexArray(int offset, int count);

    /// <summary>
    /// Draw vertex array elements
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlDrawVertexArrayElements(int offset, int count, void* buffer);

    /// <summary>
    /// Draw vertex array (currently active vao) with instancing
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlDrawVertexArrayInstanced(int offset, int count, int instances);

    /// <summary>
    /// Draw vertex array elements with instancing
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlDrawVertexArrayElementsInstanced(int offset, int count, void* buffer, int instances);

    /// <summary>
    /// Load texture data
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial uint rlLoadTexture(void* data, int width, int height, int format, int mipmapCount);

    /// <summary>
    /// Load depth texture/renderbuffer (to be attached to fbo)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadTextureDepth(int width, int height, NativeBool useRenderBuffer);

    /// <summary>
    /// Load texture cubemap data
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial uint rlLoadTextureCubemap(void* data, int size, int format, int mipmapCount);

    /// <summary>
    /// Update texture with new data on GPU
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlUpdateTexture(uint id, int offsetX, int offsetY, int width, int height, int format, void* data);

    /// <summary>
    /// Get OpenGL internal formats
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlGetGlTextureFormats(int format, uint* glInternalFormat, uint* glFormat, uint* glType);

    /// <summary>
    /// Get name string for pixel format
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial string rlGetPixelFormatName(uint format);

    /// <summary>
    /// Unload texture from GPU memory
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadTexture(uint id);

    /// <summary>
    /// Generate mipmap data for selected texture
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlGenTextureMipmaps(uint id, int width, int height, int format, int* mipmaps);

    /// <summary>
    /// Read texture pixel data
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void* rlReadTexturePixels(uint id, int width, int height, int format);

    /// <summary>
    /// Read screen pixel data (color buffer)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial byte* rlReadScreenPixels(int width, int height);

    /// <summary>
    /// Load an empty framebuffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadFramebuffer();

    /// <summary>
    /// Attach texture/renderbuffer to a framebuffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlFramebufferAttach(uint fboId, uint texId, int attachType, int texType, int mipLevel);

    /// <summary>
    /// Verify framebuffer is complete
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial NativeBool rlFramebufferComplete(uint id);

    /// <summary>
    /// Delete framebuffer from GPU
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadFramebuffer(uint id);

    /// <summary>
    /// Load shader from code strings
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadShaderCode(string vsCode, string fsCode);

    /// <summary>
    /// Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlCompileShader(string shaderCode, int @type);

    /// <summary>
    /// Load custom shader program
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadShaderProgram(uint vShaderId, uint fShaderId);

    /// <summary>
    /// Unload shader program
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadShaderProgram(uint id);

    /// <summary>
    /// Get shader location uniform
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial int rlGetLocationUniform(uint shaderId, string uniformName);

    /// <summary>
    /// Get shader location attribute
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial int rlGetLocationAttrib(uint shaderId, string attribName);

    /// <summary>
    /// Set shader value uniform
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlSetUniform(int locIndex, void* value, int uniformType, int count);

    /// <summary>
    /// Set shader value matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetUniformMatrix(int locIndex, Matrix4x4 mat);

    /// <summary>
    /// Set shader value matrices
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlSetUniformMatrices(int locIndex, Matrix4x4* mat, int count);

    /// <summary>
    /// Set shader value sampler
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetUniformSampler(int locIndex, uint textureId);

    /// <summary>
    /// Set shader currently active (id and locations)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlSetShader(uint id, int* locs);

    /// <summary>
    /// Load compute shader program
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlLoadComputeShaderProgram(uint shaderId);

    /// <summary>
    /// Dispatch compute shader (equivalent to *draw* for graphics pipeline)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlComputeShaderDispatch(uint groupX, uint groupY, uint groupZ);

    /// <summary>
    /// Load shader storage buffer object (SSBO)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial uint rlLoadShaderBuffer(uint size, void* data, int usageHint);

    /// <summary>
    /// Unload shader storage buffer object (SSBO)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlUnloadShaderBuffer(uint ssboId);

    /// <summary>
    /// Update SSBO buffer data
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlUpdateShaderBuffer(uint id, void* data, uint dataSize, uint offset);

    /// <summary>
    /// Bind SSBO buffer
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlBindShaderBuffer(uint id, uint index);

    /// <summary>
    /// Read SSBO buffer data (GPU->CPU)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static unsafe partial void rlReadShaderBuffer(uint id, void* dest, uint count, uint offset);

    /// <summary>
    /// Copy SSBO data between buffers
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlCopyShaderBuffer(uint destId, uint srcId, uint destOffset, uint srcOffset, uint count);

    /// <summary>
    /// Get SSBO buffer size
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial uint rlGetShaderBufferSize(uint id);

    /// <summary>
    /// Bind image texture
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlBindImageTexture(uint id, uint index, int format, NativeBool @readonly);

    /// <summary>
    /// Get internal modelview matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial Matrix4x4 rlGetMatrixModelview();

    /// <summary>
    /// Get internal projection matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial Matrix4x4 rlGetMatrixProjection();

    /// <summary>
    /// Get internal accumulated transform matrix
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial Matrix4x4 rlGetMatrixTransform();

    /// <summary>
    /// Get internal projection matrix for stereo render (selected eye)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial Matrix4x4 rlGetMatrixProjectionStereo(int eye);

    /// <summary>
    /// Get internal view offset matrix for stereo render (selected eye)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial Matrix4x4 rlGetMatrixViewOffsetStereo(int eye);

    /// <summary>
    /// Set a custom projection matrix (replaces internal projection matrix)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetMatrixProjection(Matrix4x4 proj);

    /// <summary>
    /// Set a custom modelview matrix (replaces internal modelview matrix)
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetMatrixModelview(Matrix4x4 view);

    /// <summary>
    /// Set eyes projection matrices for stereo rendering
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetMatrixProjectionStereo(Matrix4x4 right, Matrix4x4 left);

    /// <summary>
    /// Set eyes view offsets matrices for stereo rendering
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlSetMatrixViewOffsetStereo(Matrix4x4 right, Matrix4x4 left);

    /// <summary>
    /// Load and draw a cube
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlLoadDrawCube();

    /// <summary>
    /// Load and draw a quad
    /// </summary>
    [LibraryImport(LIBRARY, StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = [typeof(CallConvCdecl)])]
    public static partial void rlLoadDrawQuad();
}
